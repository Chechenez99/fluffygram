from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from rest_framework.exceptions import PermissionDenied
from rest_framework.response import Response
from .models import Post, Comment, PostImage, Like,  CommentLike
from .serializers import PostSerializer, CommentSerializer
from rest_framework.decorators import api_view, permission_classes
from rest_framework.views import APIView
from django.db.models import Q
from users.models import FriendRequest
from .serializers import PostSerializer
from groups.models import Group  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–¥–µ-—Ç–æ
from datetime import timedelta
from django.utils import timezone
from rest_framework import status
from direct_messages.models import Dialog, Message  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–æ–±–∞–≤—å


class CommentViewSet(viewsets.ModelViewSet):
    queryset = Comment.objects.all().order_by('-created_at')
    serializer_class = CommentSerializer
    permission_classes = [IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

    def destroy(self, request, *args, **kwargs):
        comment = self.get_object()
        user = request.user
        now = timezone.now()

        is_comment_author = comment.user == user
        is_post_author = comment.post.user == user
        is_recent = (now - comment.created_at) <= timedelta(minutes=5)

        if is_comment_author and is_recent:
            return super().destroy(request, *args, **kwargs)
        elif is_post_author:
            return super().destroy(request, *args, **kwargs)
        else:
            return Response(
                {"detail": "–£–¥–∞–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –∏–ª–∏ –∞–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞."},
                status=status.HTTP_403_FORBIDDEN
            )

class PostViewSet(viewsets.ModelViewSet):

    serializer_class = PostSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        queryset = Post.objects.all().order_by("-created_at")
        user_id = self.request.query_params.get("user")
        group_id = self.request.query_params.get("group")
        hashtag = self.request.query_params.get("hashtag")

        if user_id:
            queryset = queryset.filter(user_id=user_id, group__isnull=True)

        if group_id:
            queryset = queryset.filter(group_id=group_id)

        if hashtag:
            hashtag = hashtag.lower()
            queryset = queryset.filter(hashtags__icontains=hashtag)

        if not user_id and not group_id and not hashtag:
            queryset = queryset.filter(user=self.request.user, group__isnull=True)

        return queryset

    def perform_create(self, serializer):
        group_id = self.request.POST.get('group') or self.request.data.get('group')
        group = None
        if group_id:
            from groups.models import Group
            try:
                group = Group.objects.get(id=group_id)
            except Group.DoesNotExist:
                group = None

        post = serializer.save(user=self.request.user, group=group)

        # üí° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for image_file in self.request.FILES.getlist("images")[:10]:
            PostImage.objects.create(post=post, image=image_file)

    def destroy(self, request, *args, **kwargs):
        post = self.get_object()

        is_author = post.user == request.user
        
        if not is_author:
            return Response({'detail': '–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç.'}, status=status.HTTP_403_FORBIDDEN)

        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–æ—Å—Ç, —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–ø–æ—Å—Ç–æ–≤ —É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        if post.original_post:
            original = post.original_post
            original.repost_count = max(0, original.repost_count - 1)
            original.save()
            
        # –ï—Å–ª–∏ —É –ø–æ—Å—Ç–∞ –µ—Å—Ç—å —Ä–µ–ø–æ—Å—Ç—ã –∏ –º—ã —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ —Å–≤—è–∑–∏ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤
        if not post.original_post and post.reposts.exists():
            for repost in post.reposts.all():
                # –î–µ–ª–∞–µ–º —Ä–µ–ø–æ—Å—Ç—ã "—Å–∏—Ä–æ—Ç–∞–º–∏"
                repost.original_post = None
                repost.save()

        return super().destroy(request, *args, **kwargs)

class NewsFeedView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user

        # 1. –ü–æ–ª—É—á–∞–µ–º id –¥—Ä—É–∑–µ–π
        sent = FriendRequest.objects.filter(sender=user, accepted=True).values_list('receiver_id', flat=True)
        received = FriendRequest.objects.filter(receiver=user, accepted=True).values_list('sender_id', flat=True)
        friend_ids = list(set(sent) | set(received))

        # 2. –ü–æ–ª—É—á–∞–µ–º id –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω (ManyToMany)
        group_ids = user.subscribed_groups.values_list('id', flat=True)

        # 3. –ü–æ—Å—Ç—ã –æ—Ç –¥—Ä—É–∑–µ–π –∏ –∏–∑ –≥—Ä—É–ø–ø
        posts = Post.objects.filter(
            Q(user_id__in=friend_ids) | Q(group_id__in=group_ids)
        ).order_by('-created_at')

        serializer = PostSerializer(posts, many=True, context={'request': request})
        return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def toggle_like(request, post_id):
    user = request.user
    try:
        post = Post.objects.get(pk=post_id)
    except Post.DoesNotExist:
        return Response({"error": "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

    like, created = Like.objects.get_or_create(user=user, post=post)
    if not created:
        like.delete()
        liked = False
    else:
        liked = True

    return Response({
        "likes_count": post.likes.count(),
        "liked_by_user": liked
    })

@api_view(["POST"])
@permission_classes([IsAuthenticated])
def toggle_comment_like(request, comment_id):
    try:
        comment = Comment.objects.get(id=comment_id)
    except Comment.DoesNotExist:
        return Response({"error": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

    user = request.user
    like, created = CommentLike.objects.get_or_create(user=user, comment=comment)

    if not created:
        like.delete()
        liked = False
    else:
        liked = True

    return Response({
        "likes_count": comment.likes.count(),
        "liked_by_user": liked
    })

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def repost_post(request, pk):
    try:
        original = Post.objects.get(pk=pk)
    except Post.DoesNotExist:
        return Response({'error': '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)

    if original.original_post:
        root_post = original.original_post  # –µ—Å–ª–∏ —É–∂–µ —Ä–µ–ø–æ—Å—Ç, –±–µ—Ä–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    else:
        root_post = original

    # –ü–æ–ª—É—á–∞–µ–º group_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
    group_id = request.data.get('group_id')
    group = None
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if group_id:
        try:
            group = Group.objects.get(pk=group_id)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if not request.user.subscribed_groups.filter(id=group_id).exists():
                return Response({'error': '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã'}, status=403)
        except Group.DoesNotExist:
            return Response({'error': '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=404)

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ—Å—Ç
    repost = Post.objects.create(
        user=request.user,
        content=request.data.get('content', ''),  # –ü–æ–∑–≤–æ–ª—è–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–µ–ø–æ—Å—Ç—É
        hashtags=[],  # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤–∑—è—Ç—å —Ö—ç—à—Ç–µ–≥–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        original_post=root_post,
        group=group,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    )

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–ø–æ—Å—Ç–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    root_post.repost_count += 1
    root_post.save()

    serializer = PostSerializer(repost, context={'request': request})
    return Response(serializer.data, status=status.HTTP_201_CREATED)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def share_post_to_chat(request, chat_id):
    try:
        post_id = request.data.get('post_id')
        print("DEBUG post_id:", post_id)
        post = Post.objects.get(pk=post_id)
        post.repost_count += 1
        post.save()
        chat = Dialog.objects.get(pk=chat_id)

        if chat.is_group:
            if not chat.participants.filter(id=request.user.id).exists():
                return Response({'error': '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞'}, status=403)
        else:
            if request.user != chat.user1 and request.user != chat.user2:
                return Response({'error': '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞'}, status=403)

        message = Message.objects.create(
            dialog=chat,
            sender=request.user,
            receiver=None if chat.is_group else (chat.user2 if chat.user1 == request.user else chat.user1),
            text=request.data.get("comment", "–î–µ–ª—é—Å—å –ø–æ—Å—Ç–æ–º"),
            shared_post=post  # üÜï –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –ø–æ—Å—Ç
        )


        return Response({'success': True}, status=201)

    except Post.DoesNotExist:
        return Response({'error': '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
    except Dialog.DoesNotExist:
        return Response({'error': '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
    except Exception as e:
        return Response({'error': str(e)}, status=400)